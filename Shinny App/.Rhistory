summary(model)
model$coef
vif(lm(mpg~., data=mtcars))
vif(lm(mpg~.-disp, data=mtcars))
vif(lm(mpg~. -disp-cyl, data=mtcars))
summary(fit0)
fit0 <- lm(mpg~. -disp-cyl, data=mtcars)
summary(fit0)
summary(fit)
fit_Y <- fit
fit_N <- lm(mpg~wt+qsec+am-1,data=mtcars)
anova(fit_N, fit_Y)
model <- fit_N
summary(model)
kappa(mtcars)
kappa(lm(mpg~. -disp-cyl, data=mtcars))
kappa(lm(mpg~., data=mtcars))
kappa(model)
fit_N <- lm(mpg~wt+qsec+am-1,data=mtcars)
model <- fit_N
kappa(model)
str(mtcars)
model_adj <- lm(mpg~wt*am+qsec*am, data=mtcars)
summary(model_adj)
annova(model, model_adj)
anova(model, model_adj)
summary(model)
summary(model_adj)
names(summary(model_adj))
summary(model_adj)$r.squared
summary(model)$r.squared
summary(model_adj)$adj.r.squared
summary(model)$adj.r.squared
split <- split(mtcars$am, ratio=0.7, )
?split
split <- split(mtcars$am, 0.7)
head(split)
summary(split)
split <- split(mtcars$am)
library(caTools)
split <- sample.split(mtcars$am, SplitRatio=0.7)
test = mtcars[split==1,]
train = mtcars[split==0,]
nrow(test)
nrow(train)
nrow(mtcars)
model_valid <- lm(mpg~wt+qsec+am, data=test)
model_valid_adj <- lm(mpg~wt*am+qsec*am, data=test)
train = mtcars[split==1,]
test = mtcars[split==0,]
model_valid <- lm(mpg~wt+qsec+am, data=train)
model_valid_adj <- lm(mpg~wt*am+qsec*am, data=train)
names(predict(model_valid, newdata=test))
predict(model_valid, newdata=test)
test
test$mpg
(test$mpg-predict(model_valid, newdata=test))^2
sum((test$mpg-predict(model_valid, newdata=test))^2)
sum((test$mpg-predict(model_valid_adj, newdata=test))^2)
sum((test$mpg-predict(model_valid, newdata=test))^2)
sum((test$mpg-predict(model_valid_adj, newdata=test))^2)
s
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
?mtcar
?mtcars
data(mtcars)
names(mtcars)
?mtcars
str(mtcars)
# Model selection by VIF
library(car)
vif(lm(mpg~., data=mtcars))
vif(lm(mpg~.-disp, data=mtcars))
vif(lm(mpg~. -disp-cyl, data=mtcars))
# Model selection by p-value. Stepwise selection.
fit0 <- lm(mpg~. -disp-cyl, data=mtcars)
summary(fit0)
fit0
names(fit0)
fit0coefficients
fit0$coefficients
summary(fit0)$coeff
install.packages("shiny")
library(shiny)
runExample("01_hello")
library(jsonlite)
key <- "ef03e285-aa1e-486d-864a-2d3f0fe2857e"
url <- "https://na.api.pvp.net/api/lol/na/v1.4/summoner/by-name/RiotSchmick?api_key="
req <- fromJSON(paste0(url,key))
req
champion <- fromJSON("https://na.api.pvp.net/api/lol/na/v1.2/champion?freeToPlay=True&api_key=ef03e285-aa1e-486d-864a-2d3f0fe2857e")
champion2 <- fromJSON("https://na.api.pvp.net/api/lol/na/v1.2/champion?freeToPlay=True&api_key=ef03e285-aa1e-486d-864a-2d3f0fe2857e")
new <- fromJSON("https://na.api.pvp.net/api/lol/na/v1.2/champion/1?api_key=ef03e285-aa1e-486d-864a-2d3f0fe2857e")
new
req
champion
write.csv(champion, "champion.csv")
getwd()
a <- matrix(1:10,1)
a
a <- matrix(1:10,10)
a
a <- as.data.frame(a)
a
write.csv(a, "a.csv")
library fromJSON
url <- "https://na.api.pvp.net/api/lol/na/v1.2/champion?freeToPlay=TURE&api_key=ef03e285-aa1e-486d-864a-2d3f0fe2857e"
library(JSON)
library(jsonlite)
url <- "https://na.api.pvp.net/api/lol/na/v1.2/champion?freeToPlay=TURE&api_key=ef03e285-aa1e-486d-864a-2d3f0fe2857e"
data <- fromJSON(url)
data
library(jsonlite)
url <- "https://na.api.pvp.net/api/lol/na/v1.2/champion?freeToPlay=TURE&api_key=ef03e285-aa1e-486d-864a-2d3f0fe2857e"
data <- fromJSON(url)
data
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
source('calculation.R')
items = read.csv('adc_items.csv')
champions = read.csv('champions.csv')
spells = read.csv('adcList.csv')
item = items[3,]
Ashe = function(champions, level, item, spells, spell_level, armor, resist){
champ = return_info(champions,'Ashe',level)
r = rtable(champ, item)
rtable = r[[1]]
rpassive = r[[2]]
spell = spells[1:6,]
q = spell[spell_level[1]+1,]
w = spell[spell_level[2]+1,]
e = spell[spell_level[3]+1,]
r = spell[spell_level[4]+1,]
if ('Infinity Edge' %in% item$name){bonus_critical_damage=0.5}else{bonus_critical_damage=0}
bonus_rate_multiply = 1.1 + (rtable$CriticalStrikeChance[1]*(1+bonus_critical_damage))
damage = rtable$AttackDamage[1]
if(spell_level[1]!=0){
interval = function(){
fast = 1/(rtable$AttackSpeed[1]*(1+q$q_speed))
slow = 1/rtable$AttackSpeed[1]
v = c(0)
n = 0
repeat{if(n > 300){break}else{
t = n + spell$q_speed[1]
repeat{if(n > t){
list = n + seq(slow, by=slow,length.out = spell$q_c[1] - 1)
v = c(v,list)
n = n + slow * (spell$q_c[1] - 1)
break
}else{
n = n + fast
v = c(v,n)
}}}
}
v
}
time_list = interval()
damage_list = rep(damage, length(time_list))
type_list = rep('Basic', length(time_list))
result = data.frame('time'=time_list, 'damage'=damage_list, 'type'=type_list)
# Q ability simulation.
q_interval = function(){
fast = 1/(rtable$AttackSpeed[1]*(1+q$q_speed))
slow = 1/rtable$AttackSpeed[1]
v = c(0)
n = 0
repeat{if(n > 300){break}else{
t = n + spell$q_speed[1]
repeat{if(n > t){
n = n + slow * (spell$q_c[1] - 1)
break
}else{
n = n + fast
v = c(v,n)
}
}}
}
v
}
q_damage = q$q_ad_p * damage * spell$q_ad_p[1]
q_time_list = q_interval()
q_damage_list = rep(q_damage, length(q_time_list))
q_type_list = rep('Q', length(q_time_list))
result = rbind(result, data.frame('time'=q_time_list, 'damage'=q_damage_list, 'type'=q_type_list))
}else{
time_list = seq(0, 300, by = 1/rtable$AttackSpeed[1])
damage_list = rep(damage, length(time_list))
type_list = rep('Basic', length(time_list))
result = data.frame('time'=time_list, 'damage'=damage_list, 'type'=type_list)
}
# W ability simulation.
if(spell_level[2]!=0){
w_time_list = seq(0, 300, by=w$w_c*(1-rtable$CooldownReduction[1]))
w_damage_list = rep((w$w_ad+damage*w$w_ad_p), length(w_time_list))
w_type_list = rep('W', length(w_time_list))
result = rbind(result, data.frame('time'=w_time_list, 'damage'=w_damage_list, 'type'=w_type_list))
}else{}
# R ability simulation
if(spell_level[4]!=0){
r_time_list = seq(0, 300, by=r$r_c*(1-rtable$CooldownReduction[1]))
r_damage_list = rep((r$r_ap+r$r_ap_p*rtable$AbilityPower[1]), length(r_time_list))
r_type_list = rep('R', length(r_time_list))
result = rbind(result, data.frame('time'=r_time_list, 'damage'=r_damage_list, 'type'=r_type_list))
}else{}
# Add damage caused by items' passive.
passive = function(rpassive, result, time_list, chance, resist){
basic = subset(result, type='Basic')
attack = basic[1,2]
n = length(rpassive)
for (i in 1:n){
p = rpassive[[i]]
if(grepl('bleed', p)){damage=as.numeric(substr(p,19,21))*attack/5; damage=damage*(1+chance)
result = rbind(result, data.frame('time'=seq(0,300), 'damage'=rep(damage,301), 'type'=rep('Bleed',301)))}
if(grepl('energized',p)){lower=as.numeric(substr(p,27,28));upper=as.numeric(substr(p,30,32))
if(is.na(upper)){damage=lower}else{damage=lower+(level-1)*(upper-lower)/17}
passive_time_list = time_list[seq(1,length(time_list),by=8)]
result = rbind(result, data.frame('time'=passive_time_list, 'damage'=rep(damage,length(passive_time_list)), 'type'=rep('Energized',length(passive_time_list))))}
if(grepl('spellblade',p)){damage=attack*as.numeric(substr(p,13,16));interval=as.numeric(substr(p,33,35))+0.5
passive_time_list=seq(0,300,by=interval);damage_list=rep(damage,length(passive_time_list));type_list=rep('SpellBlade', length(passive_time_list))
result = rbind(result, data.frame('time'=passive_time_list, 'damage'=damage_list, 'type'=type_list))}
if(grepl('stack',p)){stack=as.numeric(substr(p,8,8)); t=as.numeric(substr(p,42,42)); extra=stack*t
result = rbind(result, data.frame('time'=time_list, 'damage'=rep(extra,length(time_list)), 'type'=rep('Stack',length(time_list))))}
if(grepl('magicresist',p)){change=as.numeric(substr(p,14,18));resist=resist+change}
}
a = list(result, resist)
a
}
rr = passive(rpassive, result, time_list, rtable$CriticalStrikeChance[1], resist)
result = rr[[1]]
resist = rr[[2]]
# Adjust damage by armor, resist and Ashe's passive.
result$time = as.numeric(result$time)
result$damage = as.numeric(result$damage)
result$damage = bonus_rate_multiply*result$damage
armor_ratio = 100/(100+armor)
resist_ratio = 100/(100+resist)
for (i in 1:nrow(result)){
if (result[i,3] %in% c('R', 'Bleed', 'Energized')){result[i,2]=result[i,2]*resist_ratio}
else{result[i,2]=result[i,2]*armor_ratio}}
result
}
adj_ashe = function(result){
result$time = ceiling(result$time)
sum = tapply(result$damage, list(result$time, result$type), sum)
c = ncol(sum)
nd = data.frame('time'=as.numeric(rownames(sum)), 'damage'=sum[,1], 'type'=colnames(sum)[1])
if(c>=2){for (i in 2:c){nd = rbind(nd, data.frame('time'=as.numeric(rownames(sum)), 'damage'=sum[,i], 'type'=colnames(sum)[i]))}}
nd = nd[complete.cases(nd),]
rownames(nd) = NULL
nd
}
a = Ashe(champions, 10, item, spells, c(0,1,1,1),0,0)
View(a)
View(a)
a = Ashe(champions, 10, item, spells, c(1,0,1,1),0,0)
View(a)
a = Ashe(champions, 10, item, spells, c(0,0,0,1),0,0)
View(a)
b = adj_ashe(a)
View(b)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
View(a)
a = Ashe(champions, 1, item, spells, c(1,0,0,1),0,0)
View(a)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
a = Ashe(champions, 1, item, spells, c(1,0,0,1),0,0)
View(a)
View(a)
View(a)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
c = total_damage(a, 30)
View(a)
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1])]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
spells <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}else{
damage = damage + matrix[i,2]
spells = c(spells, matrix[i,3])
}}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
View(a)
nrow(a)
a[1,1]
a[1,3]
a[2,4]
a[2,2]
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1])]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
spells <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
spells = c(spells, as.character(matrix[i,3]))
}
}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
spells <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
spells = c(spells, as.character(matrix[i,3]))
}
}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
c
c[[2]]
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
Behaviors <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
Behaviors = c(Behaviors, as.character(matrix[i,3]))
}
}
table = table(spells)
list(damage, table)
}
c = total_damage(a, 30)
c[[2]]
c[[1]]
c[2]
total_damage <- function(matrix, seconds){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
damage <- 0
Behaviors <- c()
for (i in 1:nrow(matrix)){
if (matrix[i,1]>seconds){break}
else{
damage = damage + matrix[i,2]
Behaviors = c(Behaviors, as.character(matrix[i,3]))
}
}
table = table(Behaviors)
list(damage, table)
}
c = total_damage(a, 30)
c
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
second_need <- function(matrix, damage){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
did <- 0
Behaviors <- c()
for(i in 1:nrow(matrix)){
did = did + matrix[i,2]
Behaviors <- c(Behaviors, as.character(matrix[i,3]))
if(did >= damage){second <- round(matrix[i,1]); break}
}
table = table(Behaviors)
list(second, Behaviors)
}
c = second_need(a,1000)
c
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
second_need <- function(matrix, damage){
matrix <- matrix[order(matrix[,1]),]
matrix[,1] <- as.numeric(matrix[,1])
did <- 0
Behaviors <- c()
for(i in 1:nrow(matrix)){
did = did + matrix[i,2]
if(matrix[i,3] %in% c('Q','W','E','R','Basic')){Behaviors = c(Behaviors, as.character(matrix[i,3]))}
if(did >= damage){second <- round(matrix[i,1]); break}
}
table = table(Behaviors)
list(second, table)
}
second_need(a, 1000)
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
deployApp(Appname='LOL')
library(rsconnect)
deployApp(Appname='LOL')
deployApp(AppName='LOL')
deployApp(name='LOL')
deployApp(Name='LOL')
deployApp()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
deployApp()
shinyapps::setAccountInfo(name='dmindemon', token='155DC49A55841A3DDF2D28DFA7E3DCE9', secret='57ACrlVj74T7aISOSAuz6zbJC756TdOtI/fjvde+')
deployApp()
deployApp('LOL')
deployApp()
deployApp(appName='LOL')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
View(items)
nnn <- items[-1:-9,]
View(nnn)
nnn <- nnn[order(nnn$name),]
View(nnn)
rownames(nnn)=NULL
View(nnn)
nnn$X=NULL
View(nnn)
write.csv(nnn,'dictionaryimage.csv')
getwd()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
deployApp()
library(rconnect)
library(rsconnect)
deployApp()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
library(rsconnect)
deployApp()
shiny::runApp('Desktop/LoL-project/Web Scraping (Data Incubator Project)')
setwd("~/Desktop/LoL-project/Web Scraping (Data Incubator Project)")
shiny::runApp()
shiny::runApp()
items = read.csv('adc_items.csv')
View(items)
items = items[-53,]
View(items)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
items = read.csv('adc_items.csv')
shiny::runApp()
items = read.csv('adc_items.csv')
items = items[-53,]
View(items)
items = read.csv('adc_items.csv')
View(items)
items = read.csv('adc_items.csv')
rownames(items)=NULL
champions = read.csv('champions.csv')
rownames(champions)=NULL
spells = read.csv('adcList.csv')
rownames(spells)=NULL
items = items[-53,]
View(items)
shiny::runApp()
